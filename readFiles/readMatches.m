function [data,other,params] = readMatches_(fname,maxnframes)
%
% [data,other,params] = readmatches_(fname,maxnframes)
%
% Reads .dat files generated by "STM.py" containing matches between rays of
% different cameras. It stores data of particle position in the matrix
% "data" and some complementary info in the matrix "other". Total number of
% frames and matches are outputed into "params" struct.
%
%
% INPUTS
% fname : filename of .dat file containing information of rays
% maxnframes : maximum number of frames to be read
%
%
% OUTPUTS
% data : Nframes x 5 matrix with columns: [FrameNumber, x, y, z, Error]
% other : Nframes x 5 matrix with columns: [NumberOfRaysUsedInMatch,
% cam0ID, ray0ID, cam1ID, ray1ID]
% params : Struct with: - params.Nframes the number of frames
% - params.Nmatches the total number of matches
%
%__________________________________________________________________________

% set maxnframes if not inputted
if nargin < 2
    maxnframes = 1e5;
elseif isempty(maxnframes)
    maxnframes = 1e5;
end

% load data
fid = fopen(fname,'r');
data = [];
other = [];
Nmatches = 0;
nmatches = 0;
Nframes = 0;
while ~isempty(nmatches) && (Nframes < maxnframes)
    nmatches = fread(fid,1,'uint32');
    Nframes = Nframes + 1;
    for imatch = 1:nmatches
        ncams = fread(fid,1,'uchar');
        other(Nmatches+imatch,1) = ncams;
        data(Nmatches+imatch,:) = [Nframes fread(fid,4,'float32')'];
        for kcams = 1:ncams
            other(Nmatches+imatch,2*kcams) = fread(fid,1,'uchar');
            other(Nmatches+imatch,2*kcams-1) = fread(fid,1,'ushort');
        end
    end
    Nmatches = Nmatches+nmatches;
    if rem(Nframes,100)==0; disp([num2str(Nframes),' frames loaded.']); end
end
fclose(fid);

if isempty(nmatches)
    Nframes = Nframes-1;
end
Nmatches = length(data);

params.Nframes = Nframes;
params.Nmatches = Nmatches;

disp([num2str(Nmatches),' matches in ',num2str(Nframes),' frames']);

end